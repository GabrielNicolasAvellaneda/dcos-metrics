#!/usr/bin/python

import json, sys, time

"""Converts the Metrics JSON schema into a C++ header file, minimizing the JSON in the process"""

PREFIX = """#pragma once

// THIS FILE IS AUTOGENERATED BY 'generate_metrics_schema_json.py'. DO NOT EDIT.
// Avro C++ requires that we provide the JSON schema directly, not just use the generated structs.

// Generated at: %s
// Command: %s

namespace metrics_schema {
  const std::string SCHEMA_JSON(R"JSON(""" % (time.ctime(), " ".join(sys.argv))

SUFFIX = """)JSON");
}

// AGAIN, THIS FILE IS AUTOGENERATED BY 'generate_metrics_schema_json.py'. DO NOT EDIT.
"""

def strip_doc_fields(json_tree):
    json_tree.pop("doc", None)
    for k,v in json_tree.items():
        if isinstance(v,list):
            for ventry in v:
                if isinstance(ventry,dict):
                    strip_doc_fields(ventry) # recurse
        elif isinstance(v,dict):
            strip_doc_fields(v) # recurse
    return json_tree

def generate(infile, outfile):
    json_stripped = strip_doc_fields(json.load(infile))
    outfile.write(PREFIX)
    json.dump(json_stripped, outfile, separators=(',',':'), sort_keys=True)
    outfile.write(SUFFIX)

if __name__ == "__main__":
    inpath = sys.argv[1]
    outpath = sys.argv[2]
    print("{} => {}".format(inpath, outpath))
    generate(open(inpath), open(outpath, 'wb'))
